#!/bin/sh
# $FreeBSD: head/www/nginx-devel/files/nginx.in 532602 2020-04-22 22:09:12Z osa $

# PROVIDE: nginx
# REQUIRE: LOGIN cleanvar
# KEYWORD: shutdown

#
# Add the following lines to /etc/rc.conf to enable nginx:
# nginx_enable (bool):		Set to "NO" by default.
#				Set it to "YES" to enable nginx
# nginx_profiles (str):		Set to "" by default.
#				Define your profiles here.
# nginx_pid_prefix (str):	Set to "" by default.
#				When using profiles manually assign value to "nginx_"
#				for prevent collision with other PIDs names.
# nginxlimits_enable (bool):	Set to "NO" by default.
#				Set it to yes to run `limits $limits_args`
#				just before nginx starts.
# nginx_reload_quiet (bool):	Set to "NO" by default.
#				Set it to yes to suppress info output when testng config.
# nginx_flags (str):		Set to "" by default.
#				Extra flags passed to start command.
# nginxlimits_args (str):	Default to "-e -U %%WWWOWN%%"
#				Arguments of pre-start limits run.
# nginx_http_accept_enable (bool): Set to "NO" by default.
#				Set to yes to check for accf_http kernel module
#				on start-up and load if not loaded.
# nginx_mac_portacl_enable (bool): Set to "NO" by default.
#				Set to yes to allow non-privileged nginx process to bind
#				to ports below 1024.
# nginx_mac_portacl_rules (bool): Set to "uid:$nginx_user:tcp:80,uid:$nginx_user:tcp:443"
#				by default to allow non-privileged nginx process to bind
#				to ports 80/tcp and 443/tcp.


. /etc/rc.subr

name="nginx"
rcvar=nginx_enable

start_cmd="nginx_start"
stop_cmd="nginx_stop"
restart_precmd="nginx_checkconfig"
restart_cmd="nginx_restart"
reload_precmd="nginx_checkconfig"
reload_cmd="nginx_reload"
configtest_cmd="nginx_checkconfig"
gracefulstop_cmd="nginx_gracefulstop"
upgrade_precmd="nginx_checkconfig"
upgrade_cmd="nginx_upgrade"
command="%%PREFIX%%/sbin/nginx"
_pidprefix="%%NGINX_RUNDIR%%/${name}"
pidfile="${_pidprefix}/${name}.pid"
_tmpprefix="%%NGINX_TMPDIR%%"
required_files=%%PREFIX%%/etc/nginx/nginx.conf
extra_commands="reload configtest upgrade gracefulstop"

[ -z "$nginx_enable" ]		&& nginx_enable="NO"
[ -z "$nginx_user" ]		&& nginx_user="%%WWWOWN%%"
[ -z "$nginx_user_id" ]		&& nginx_user_id=$(id -u $nginx_user)
[ -z "$nginxlimits_enable" ]	&& nginxlimits_enable="NO"
[ -z "$nginxlimits_args" ]	&& nginxlimits_args="-e -U $nginx_user"
[ -z "$nginx_http_accept_enable" ] && nginx_http_accept_enable="NO"
[ -z "$nginx_reload_quiet" ]	&& nginx_reload_quiet="NO"
[ -z "$nginx_mac_portacl_enable" ] && nginx_mac_portacl_enable="NO"
[ -z "$nginx_mac_portacl_rules" ] && nginx_mac_portacl_rules="uid:$nginx_user_id:tcp:80,uid:$nginx_user_id:tcp:443"

load_rc_config $name

pkill_cmd="/bin/pkill"
su_cmd="/usr/bin/su"

if [ -n "$2" ]; then
	profile="$2"
	if [ "x${nginx_profiles}" != "x" ]; then
		pidfile="${_pidprefix}/${nginx_pid_prefix}${profile}.pid"
		eval nginx_configfile="\${nginx_${profile}_configfile:-}"
		if [ "x${nginx_configfile}" = "x" ]; then
			echo "You must define a configuration file (nginx_${profile}_configfile)"
			exit 1
		fi
		required_files="${nginx_configfile}"
		eval nginx_enable="\${nginx_${profile}_enable:-${nginx_enable}}"
		eval nginx_flags="\${nginx_${profile}_flags:-${nginx_flags}}"
		eval nginxlimits_enable="\${nginxlimits_${profile}_enable:-${nginxlimits_enable}}"
		eval nginxlimits_args="\${nginxlimits_${profile}_args:-${nginxlimits_args}}"
		nginx_flags="-c ${nginx_configfile} -g \"pid ${pidfile};\" ${nginx_flags}"
	else
		echo "$0: extra argument ignored"
	fi
else
	if [ "x${nginx_profiles}" != "x" -a "x$1" != "x" ]; then
		for profile in ${nginx_profiles}; do
			echo "===> nginx profile: ${profile}"
			%%PREFIX%%/etc/rc.d/nginx $1 ${profile}
			retcode="$?"
			if [ "0${retcode}" -ne 0 ]; then
				failed="${profile} (${retcode}) ${failed:-}"
			else
				success="${profile} ${success:-}"
			fi
		done
		exit 0
	fi
fi

# tmpfs(5)
nginx_checktmpdir()
{
	if [ ! -d ${_tmpprefix} ] ; then
		install -d -o %%WWWOWN%% -g %%WWWGRP%% -m 755 ${_tmpprefix}
	fi
}

nginx_checkpiddir()
{
	install -d -o %%WWWOWN%% -g %%WWWGRP%% -m 755 ${_pidprefix}
	[ -f ${pidfile} ] && chown %%WWWOWN%%:%%WWWGRP%% ${pidfile}
}

nginx_checklogdir()
{
	_logprefix="/var/log/${name}"
	install -d -o %%WWWOWN%% -g %%WWWGRP%% -m 755 ${_logprefix}
	for f in access error ; do
		[ ! -f ${_logprefix}/${f}.log ] && touch ${_logprefix}/${f}.log
		[ ! -L ${_logprefix}/${f}.log ] && chown %%WWWOWN%%:%%WWWGRP%% ${_logprefix}/${f}.log
	done
}

nginx_checkconfig()
{
	nginx_checktmpdir
	nginx_checkpiddir
	nginx_checklogdir

	if checkyesno nginx_reload_quiet; then
		if checkyesno nginx_mac_portacl_enable; then
			${su_cmd} -m ${nginx_user} -c "${command} ${nginx_flags} -t -q"
		else
			eval ${command} ${nginx_flags} -t -q
		fi
	else
		echo "Performing sanity check on nginx configuration:"
		if checkyesno nginx_mac_portacl_enable; then
			${su_cmd} -m ${nginx_user} -c "${command} ${nginx_flags} -t"
		else
			eval ${command} ${nginx_flags} -t
		fi
	fi
}

nginx_gracefulstop()
{
	echo "Performing a graceful stop:"
	sig_stop="QUIT"
	run_rc_command ${rc_prefix}stop $rc_extra_args || return 1
}

nginx_upgrade()
{
	echo "Upgrading nginx binary:"

	reload_precmd=""
	sig_reload="USR2"
	run_rc_command ${rc_prefix}reload $rc_extra_args || return 1

	sleep 1

	echo "Stopping old binary:"

	sig_reload="QUIT"
	pidfile="$pidfile.oldbin"
	run_rc_command ${rc_prefix}reload $rc_extra_args || return 1
}

nginx_mac_portacl()
{
	local reservedlow reservedhigh rules_current suser_exempt

	required_modules="$required_modules mac_portacl"
	if ! kldstat -m mac_portacl >/dev/null 2>&1 ; then
		if ! kldload mac_portacl ; then
			warn "Could not load mac_portacl module."
			return 1
		fi
	fi

	rules_current=$(sysctl -n security.mac.portacl.rules)
	if [ ! $rules_current = "" ]; then
		if ! echo $rules_current | grep "$nginx_mac_portacl_rules" >/dev/null 2>&1 ; then
			rules_current="${rules_current},${nginx_mac_portacl_rules}"
			if ! sysctl security.mac.portacl.rules="$rules_current" >/dev/null 2>&1 ; then
				warn "Could not insert nginx_mac_portacl rules."
				return 1
			fi
		fi
	elif ! sysctl security.mac.portacl.rules=$nginx_mac_portacl_rules >/dev/null 2>&1 ; then
		warn "Could not insert nginx_mac_portacl rules."
		return 1
	fi

	# Check and disable net.inet.ip.portrange.* control
	reservedlow=$(sysctl -n net.inet.ip.portrange.reservedlow)
	reservedhigh=$(sysctl -n net.inet.ip.portrange.reservedhigh)
	if [ ! $reservedlow -eq 0 ]; then
		if ! sysctl net.inet.ip.portrange.reservedlow=0 >/dev/null 2>&1 ; then
			warn "Could not change net.inet.ip.portrange.reservedlow."
			return 1
		fi
	fi
	if [ ! $reservedhigh -eq 0 ]; then
		if ! sysctl net.inet.ip.portrange.reservedhigh=0 >/dev/null 2>&1 ; then
			warn "Could not change net.inet.ip.portrange.reservedhigh."
			return 1
		fi
	fi

	# Check and prevent the root user from being affected by this policy
	suser_exempt=$(sysctl -n security.mac.portacl.suser_exempt)
	if [ $suser_exempt -lt 1 ]; then
		if ! sysctl security.mac.portacl.suser_exempt=1 >/dev/null 2>&1 ; then
			warn "Could not set security.mac.portacl.suser_exempt."
			return 1
		fi
	fi
}

nginx_precmd() 
{
	if checkyesno nginx_http_accept_enable; then
		required_modules="$required_modules accf_http accf_data"
	fi

	if checkyesno nginx_mac_portacl_enable; then
		nginx_mac_portacl
	fi

	nginx_checkconfig

	if checkyesno nginxlimits_enable; then
		eval `/usr/bin/limits ${nginxlimits_args}` 2>/dev/null
	else
		return 0
	fi
}

nginx_start()
{
	nginx_precmd
	if checkyesno nginx_mac_portacl_enable; then
		${su_cmd} -m ${nginx_user} -c "${command} ${nginx_flags}"
	else
		eval ${command} ${nginx_flags}
	fi
}

nginx_stop()
{
	${pkill_cmd} -TERM -F ${pidfile}
}

nginx_reload()
{
	[ $sig_reload = "" ] && sig_reload="HUP"
	${pkill_cmd} "-$sig_reload" -F ${pidfile}
}

nginx_restart()
{
	nginx_stop
	nginx_start
}

run_rc_command "$1"
